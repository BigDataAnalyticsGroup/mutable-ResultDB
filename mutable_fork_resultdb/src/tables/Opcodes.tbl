/* vim: set filetype=cpp: */

#ifndef M_OPCODE
#error "define M_OPCODE(Opcode, Delta, __VA_ARGS__) before including this file"
#endif


/*======================================================================================================================
 * Control flow operations
 *====================================================================================================================*/

/** Stop the machine. */
M_OPCODE(Stop, 0)

/* Stop on condition. */
M_OPCODE(Stop_Z, 0)
M_OPCODE(Stop_NZ, 0)
M_OPCODE(Stop_False, 0)
M_OPCODE(Stop_True, 0)


/*======================================================================================================================
 * Stack manipulation operations
 *====================================================================================================================*/

/** Remove the top entry from the stack. */
M_OPCODE(Pop, -1)

/** Push NULL to top of the stack. */
M_OPCODE(Push_Null, +1)

/** Duplicate the top entry of the stack. */
M_OPCODE(Dup, +1)


/*======================================================================================================================
 * Context Access Operations
 *====================================================================================================================*/

/** Load a value from the context to the top of the stack. */
M_OPCODE(Ld_Ctx, +1, index)

/** Update a value in the context with the value on top of the stack. */
M_OPCODE(Upd_Ctx, 0, index)


/*======================================================================================================================
 * Tuple Access Operations
 *====================================================================================================================*/

/** Load a value from a tuple to the top of the stack. */
M_OPCODE(Ld_Tup, +1, tuple_id, index)

/** Store NULL into a tuple. */
M_OPCODE(St_Tup_Null, 0, tuple_id, index)
/** Store the current top-of-stack into a tuple. */
M_OPCODE(St_Tup_i,  0, tuple_id, index)
/** Store the current top-of-stack into a tuple. */
M_OPCODE(St_Tup_f,  0, tuple_id, index)
/** Store the current top-of-stack into a tuple. */
M_OPCODE(St_Tup_d,  0, tuple_id, index)
/** Store the current top-of-stack into a tuple. */
M_OPCODE(St_Tup_s, -1, tuple_id, index)
/** Store the current top-of-stack into a tuple. */
M_OPCODE(St_Tup_b,  0, tuple_id, index)


/*======================================================================================================================
 * I/O Operations
 *====================================================================================================================*/

/* Writes the character `chr` to the `std::ostream` instance referenced by the `index`-th slot in the context. */
M_OPCODE(Putc, 0, index, chr)

/* Print a value to the `std::ostream` instance referenced by the `index`-th slot in the context. */
M_OPCODE(Print_i, 0, index)
M_OPCODE(Print_f, 0, index)
M_OPCODE(Print_d, 0, index)
M_OPCODE(Print_s, 0, index)
M_OPCODE(Print_b, 0, index)
M_OPCODE(Print_date, 0, index)
M_OPCODE(Print_datetime, 0, index)


/*======================================================================================================================
 * Storage Access Operations
 *====================================================================================================================*/

/*----- Load from memory ---------------------------------------------------------------------------------------------*/

M_OPCODE(Ld_i8,   0)
M_OPCODE(Ld_i16,  0)
M_OPCODE(Ld_i32,  0)
M_OPCODE(Ld_i64,  0)
M_OPCODE(Ld_f,    0)
M_OPCODE(Ld_d,    0)
M_OPCODE(Ld_s,   -1)
M_OPCODE(Ld_b,    0, mask)

/*----- Store to memory ----------------------------------------------------------------------------------------------*/

M_OPCODE(St_i8,  -2)
M_OPCODE(St_i16, -2)
M_OPCODE(St_i32, -2)
M_OPCODE(St_i64, -2)
M_OPCODE(St_f,   -2)
M_OPCODE(St_d,   -2)
M_OPCODE(St_s,   -3)
M_OPCODE(St_b,   -2, bit_offset)


/*======================================================================================================================
 * Arithmetical operations
 *====================================================================================================================*/

/* Integral increment. */
M_OPCODE(Inc, 0)
/* Integral decrement. */
M_OPCODE(Dec, 0)

/* Arithmetic negation */
M_OPCODE(Minus_i, 0)
M_OPCODE(Minus_f, 0)
M_OPCODE(Minus_d, 0)

/* Add two values. */
M_OPCODE(Add_i, -1)
M_OPCODE(Add_f, -1)
M_OPCODE(Add_d, -1)
M_OPCODE(Add_p, -1)

/* Subtract two values. */
M_OPCODE(Sub_i, -1)
M_OPCODE(Sub_f, -1)
M_OPCODE(Sub_d, -1)

/* Multiply two values. */
M_OPCODE(Mul_i, -1)
M_OPCODE(Mul_f, -1)
M_OPCODE(Mul_d, -1)

/* Divide two values. */
M_OPCODE(Div_i, -1)
M_OPCODE(Div_f, -1)
M_OPCODE(Div_d, -1)

/* Modulo divide two values. */
M_OPCODE(Mod_i, -1)


/*======================================================================================================================
 * Bitwise operations
 *====================================================================================================================*/

/* Bitwise negation */
M_OPCODE(Neg_i, 0)

/* Bitwise And */
M_OPCODE(And_i, -1)

/* Bitwise Or */
M_OPCODE(Or_i, -1)

/* Bitwise Xor */
M_OPCODE(Xor_i, -1)

/* Shift left - with operand on stack. */
M_OPCODE(ShL_i, -1)

/* Shift left immediate - with operand as argument. */
M_OPCODE(ShLi_i, 0, count)

/* Shift arithmetical right - with operand as argument. */
M_OPCODE(SARi_i, 0, count)


/*======================================================================================================================
 * Logical operations
 *====================================================================================================================*/

/* Logical not */
M_OPCODE(Not_b, 0)

/* Logical and. */
M_OPCODE(And_b, -1)

/* Logical or. */
M_OPCODE(Or_b, -1)


/*======================================================================================================================
 * String manipulation operations
 *====================================================================================================================*/

/* Concatenate two strings. */
M_OPCODE(Cat_s, -1)


/*======================================================================================================================
 * Comparison operations
 *====================================================================================================================*/

/* Test for NULL. */
M_OPCODE(Is_Null, 0)
/* Test equal to zero. */
M_OPCODE(EqZ_i, 0)
/* Test not equal to zero. */
M_OPCODE(NEZ_i, 0)

M_OPCODE(Eq_i, -1)
M_OPCODE(Eq_f, -1)
M_OPCODE(Eq_d, -1)
M_OPCODE(Eq_b, -1)
M_OPCODE(Eq_s, -1)

M_OPCODE(NE_i, -1)
M_OPCODE(NE_f, -1)
M_OPCODE(NE_d, -1)
M_OPCODE(NE_b, -1)
M_OPCODE(NE_s, -1)

M_OPCODE(LT_i, -1)
M_OPCODE(LT_f, -1)
M_OPCODE(LT_d, -1)
M_OPCODE(LT_s, -1)

M_OPCODE(GT_i, -1)
M_OPCODE(GT_f, -1)
M_OPCODE(GT_d, -1)
M_OPCODE(GT_s, -1)

M_OPCODE(LE_i, -1)
M_OPCODE(LE_f, -1)
M_OPCODE(LE_d, -1)
M_OPCODE(LE_s, -1)

M_OPCODE(GE_i, -1)
M_OPCODE(GE_f, -1)
M_OPCODE(GE_d, -1)
M_OPCODE(GE_s, -1)

M_OPCODE(Cmp_i, -1)
M_OPCODE(Cmp_f, -1)
M_OPCODE(Cmp_d, -1)
M_OPCODE(Cmp_b, -1)
M_OPCODE(Cmp_s, -1)

/* `LIKE` operator. */
M_OPCODE(Like_const, -1)
M_OPCODE(Like_expr, -1)


/*======================================================================================================================
 * Selection operation
 *====================================================================================================================*/

/* Select one of two values based on a boolean. */
M_OPCODE(Sel, -2)


/*======================================================================================================================
 * Type conversion
 *====================================================================================================================*/

/* Cast to int. */
M_OPCODE(Cast_i_f, 0)
M_OPCODE(Cast_i_d, 0)
M_OPCODE(Cast_i_b, 0)

/* Cast to float. */
M_OPCODE(Cast_f_i, 0)
M_OPCODE(Cast_f_d, 0)

/* Cast to double. */
M_OPCODE(Cast_d_i, 0)
M_OPCODE(Cast_d_f, 0)
